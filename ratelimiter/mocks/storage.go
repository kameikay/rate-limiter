// Code generated by MockGen. DO NOT EDIT.
// Source: ./ratelimiter/storage/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRateLimiterStorageInterface is a mock of RateLimiterStorageInterface interface.
type MockRateLimiterStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterStorageInterfaceMockRecorder
}

// MockRateLimiterStorageInterfaceMockRecorder is the mock recorder for MockRateLimiterStorageInterface.
type MockRateLimiterStorageInterfaceMockRecorder struct {
	mock *MockRateLimiterStorageInterface
}

// NewMockRateLimiterStorageInterface creates a new mock instance.
func NewMockRateLimiterStorageInterface(ctrl *gomock.Controller) *MockRateLimiterStorageInterface {
	mock := &MockRateLimiterStorageInterface{ctrl: ctrl}
	mock.recorder = &MockRateLimiterStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterStorageInterface) EXPECT() *MockRateLimiterStorageInterfaceMockRecorder {
	return m.recorder
}

// AddBlock mocks base method.
func (m *MockRateLimiterStorageInterface) AddBlock(ctx context.Context, key string, blockInMilliseconds int64) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlock", ctx, key, blockInMilliseconds)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlock indicates an expected call of AddBlock.
func (mr *MockRateLimiterStorageInterfaceMockRecorder) AddBlock(ctx, key, blockInMilliseconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlock", reflect.TypeOf((*MockRateLimiterStorageInterface)(nil).AddBlock), ctx, key, blockInMilliseconds)
}

// GetBlock mocks base method.
func (m *MockRateLimiterStorageInterface) GetBlock(ctx context.Context, key string) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", ctx, key)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockRateLimiterStorageInterfaceMockRecorder) GetBlock(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockRateLimiterStorageInterface)(nil).GetBlock), ctx, key)
}

// Increment mocks base method.
func (m *MockRateLimiterStorageInterface) Increment(ctx context.Context, key string, maxAccess int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", ctx, key, maxAccess)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment.
func (mr *MockRateLimiterStorageInterfaceMockRecorder) Increment(ctx, key, maxAccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockRateLimiterStorageInterface)(nil).Increment), ctx, key, maxAccess)
}
